import * as React from "react"
import classNames from "classnames"
import { useTranslation } from "next-i18next"
import { useRouter } from "next/router"
import { Folder } from "./foldersvg"
import { useState, useEffect, useRef, Fragment } from "react";
import useSWR from 'swr'
import { absoluteURL, formatDate } from "lib/utils"
import { DatePicker } from "components/datepickercomp"
import { Dialog, Transition } from '@headlessui/react'
import { ExclamationTriangleIcon, XMarkIcon } from '@heroicons/react/24/outline'

import { ImageInputAsync } from "components/imageinputasync"


interface FormFinancementeditProps extends React.HTMLProps<HTMLFormElement> {}
const fetcher = (url) => fetch(url).then((r) => r.json());



export function FormFinancementedit({ className, node, fin, categorieprj, ...props }: FormFinancementeditProps) {
  const [formStatus, setFormStatus] = React.useState<FormStatus>(null)
  const { t } = useTranslation()
  const router = useRouter()
  const query = router.query;
  const [open, setOpen] = useState(true)

  const mediaid = node.field_document_s_annexe_s_?.map((number,index) =>
     <li key={index}>{number.field_media_document.uri.url}</li>
   );

   function Formtwosubmits() {
     const submitHandler = (e) => {
       const { id } = e.nativeEvent.submitter;

       switch (id) {
         case "submit1":
           return handlesubmit_task1(e);

         case "submit2":
           return handlesubmit_task2(e);

         default:
         // ignore
       }
     };

     function handlesubmit_task1(event) {
       event.preventDefault();
       const { value } = event.target.myInput;
       console.log("handler 1", value);
       event.target.reset();
     }

     function handlesubmit_task2(event) {
       event.preventDefault();
       const { value } = event.target.myInput;
       console.log("handler 2", value);
       event.target.reset();
     }

}
     const ref = useRef();

       const reset = () => {
         ref.current.value = "";
       };



  const { data: revision, error: revisionError } = useSWR(() =>`https://fed.septembre.io/revision_history/`+ query.gid, fetcher)

  if (revisionError) return <div>Failed to load revision</div>
  if (!revision) return <div>Loading financement ...</div>



  const onSubmit = async (event) => {
    event.preventDefault()
    const data = new FormData(event.target)



    setFormStatus({ status: "fetching" })

    const response = await fetch(`/api/financementsedit/${node.id}`, {
      method: "PATCH",
      body:  data,
    })

    if (!response.ok) {
      const errors = await response.json()

      return setFormStatus({
        status: "error",
        message: errors?.map((error) => error.detail),
      })
    }

    router.push("/account")
  }

  return (

    <form onSubmit={submitHandler}

    className={classNames("grid gap-4", className)}

    {...props}>
      <button id="submit1" variant="contained" color="primary" type="submit">
        task 1
      </button>
      <button id="submit2" variant="contained" color="primary" type="submit">
        task 2
      </button>
      .... here input fields
      <input name="myInput" type="text" />
    </form>
  )
}
